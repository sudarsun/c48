cmake_minimum_required(VERSION 2.6)
project(c48)
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()
add_executable(c48 c48/AbstractClassifier.cpp c48/AbstractClassifier.h c48/C45ModelSelection.cpp c48/C45ModelSelection.h c48/C45PruneableClassifierTree.cpp c48/C45PruneableClassifierTree.h c48/C45Split.cpp c48/C45Split.h c48/C48.cpp c48/C48.h c48/Classifier.h c48/ClassifierSplitModel.cpp c48/ClassifierSplitModel.h c48/ClassifierTree.cpp c48/ClassifierTree.h)
add_executable(core core/Attribute.cpp core/Attribute.h core/AttributeInfo.h core/AttributeMetaInfo.cpp core/AttributeMetaInfo.h core/AttributeStats.cpp core/AttributeStats.h core/Consts.h core/DataSource.cpp core/DataSource.h core/DenseInstance.cpp core/DenseInstance.h core/Instance.h core/Instances.cpp core/Instances.h core/NominalAttributeInfo.cpp core/NominalAttributeInfo.h core/statistics.cpp core/statistics.h core/Utils.cpp core/Utils.h)
add_executable(test main.cpp)
include_directories(.)

install(TARGETS c48 RUNTIME DESTINATION bin)
install(TARGETS core RUNTIME DESTINATION bin)
install(TARGETS test RUNTIME DESTINATION bin)

